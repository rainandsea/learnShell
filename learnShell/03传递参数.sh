#!/bin/bash

# shell传递参数
# 我们可以在执行shell脚本时，向脚本传递参数，脚本内获取参数的格式为：$n
# n 代表一个数字，1为执行脚本的第一个参数，2位第二个参数，依次类推，$0为默认的执行文件的名称(包含文件路径)

echo "shell传递参数 实例"
echo "执行的文件名：${0}"
echo "第一个参数：${1}"
echo "第二个参数：${2}"
echo "第三个参数：$3"

# 除了上面的方式接收参数，还有几个特殊字符用来处理参数
# $#        传递到脚本的参数个数
echo "总的参数个数为：${#}"

# $*        以一个单字符串显示所有向脚本传递的参数, 会删除多余的参数之间的空格
echo "参数字符串：${*}"

# $$        脚本运行的当前进程ID号
echo "脚本运行的当前ID号是：${$}"

# $!        后台脚本运行的最后一个进程ID号
echo "脚本运行的最后一个ID号：${!}"

# $@        与$*相同，但是使用时加引号，并在引号中返回每个参数
echo "引号中返回每个参数：${@}"

# $-        显示shell使用的当前选项，与set命令功能相同
# $?        显示最后命令的退出状态，0表示没有错误，其他任何值表示有错误
echo "当前选项：${-}"
echo "退出状态：${?}"

# $* 与 $@ 区别：

# 相同点：都是引用所有参数。
# 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2 3"（传递了一个参数），
# 而 "@" 等价于 "1" "2" "3"（传递了三个参数）。
echo "-- \$* 演示 --"
for i in "$*"; do
    echo $i
done

echo "-- \$@ 演示 --"
for i in "$@"; do
    echo $i
done
